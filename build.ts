
import { build, BunPlugin } from "bun";
import dts from "bun-plugin-dts";

const removeCommentsPlugin: BunPlugin = {
    name: 'remove-comments',
    setup( build ) {
        build.onEnd( async ( result ) => {
            const { outdir } = build.config;

            // Define files and their expected comments
            const filesToProcess = [
                { name: 'index.cjs', comment: '// @bun @bun-cjs' },
                { name: 'index.mjs', comment: '// @bun' },
                { name: 'index.d.ts', comment: '// Generated by dts-bundle-generator v9.5.1' }
            ];

            for (const { name, comment } of filesToProcess) {
                const filePath = `${outdir}/${name}`;
                try {
                    const content = await Bun.file(filePath).text();
                    const lines = content.split('\n');
                    if (lines[0].trim() === comment) {
                        lines.shift();
                        while (lines.length > 0 && lines[0].trim() === '') {
                            lines.shift();
                        }
                        const newContent = lines.join('\n');
                        await Bun.write( filePath, newContent );
                    }
                } catch (error) {
                    console.error(`Error processing ${filePath}:`, error);
                }
            }
        });
    }
}

await build({
    entrypoints: ['./src/index.ts'],
    plugins: [ dts() ],
    minify: {
        identifiers: false,
        whitespace: true,
        syntax: true
    },
    naming: 'index.mjs',
    sourcemap: 'none',
    outdir: 'dist',
    format: 'esm',
    target: 'bun'
})

await build({
    entrypoints: ['./src/index.ts'],
    plugins: [ removeCommentsPlugin ],
    minify: {
        identifiers: false,
        whitespace: true,
        syntax: true
    },
    naming: 'index.cjs',
    sourcemap: 'none',
    outdir: 'dist',
    format: 'cjs',
    target: 'bun'
})
